// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatmessages

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LaserScan struct {
	_tab flatbuffers.Table
}

func GetRootAsLaserScan(buf []byte, offset flatbuffers.UOffsetT) *LaserScan {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LaserScan{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LaserScan) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LaserScan) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LaserScan) Header(obj *Header) *Header {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Header)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LaserScan) AngleMin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LaserScan) MutateAngleMin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *LaserScan) AngleMax() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LaserScan) MutateAngleMax(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *LaserScan) AngleIncrement() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LaserScan) MutateAngleIncrement(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *LaserScan) TimeIncrement() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LaserScan) MutateTimeIncrement(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *LaserScan) ScanTime() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LaserScan) MutateScanTime(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *LaserScan) RangeMin() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LaserScan) MutateRangeMin(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func (rcv *LaserScan) RangeMax() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LaserScan) MutateRangeMax(n float32) bool {
	return rcv._tab.MutateFloat32Slot(18, n)
}

func (rcv *LaserScan) Ranges(j int) float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *LaserScan) RangesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *LaserScan) Intensities(j int) float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *LaserScan) IntensitiesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func LaserScanStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func LaserScanAddHeader(builder *flatbuffers.Builder, header flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(header), 0)
}
func LaserScanAddAngleMin(builder *flatbuffers.Builder, angleMin float32) {
	builder.PrependFloat32Slot(1, angleMin, 0.0)
}
func LaserScanAddAngleMax(builder *flatbuffers.Builder, angleMax float32) {
	builder.PrependFloat32Slot(2, angleMax, 0.0)
}
func LaserScanAddAngleIncrement(builder *flatbuffers.Builder, angleIncrement float32) {
	builder.PrependFloat32Slot(3, angleIncrement, 0.0)
}
func LaserScanAddTimeIncrement(builder *flatbuffers.Builder, timeIncrement float32) {
	builder.PrependFloat32Slot(4, timeIncrement, 0.0)
}
func LaserScanAddScanTime(builder *flatbuffers.Builder, scanTime float32) {
	builder.PrependFloat32Slot(5, scanTime, 0.0)
}
func LaserScanAddRangeMin(builder *flatbuffers.Builder, rangeMin float32) {
	builder.PrependFloat32Slot(6, rangeMin, 0.0)
}
func LaserScanAddRangeMax(builder *flatbuffers.Builder, rangeMax float32) {
	builder.PrependFloat32Slot(7, rangeMax, 0.0)
}
func LaserScanAddRanges(builder *flatbuffers.Builder, ranges flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(ranges), 0)
}
func LaserScanStartRangesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LaserScanAddIntensities(builder *flatbuffers.Builder, intensities flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(intensities), 0)
}
func LaserScanStartIntensitiesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func LaserScanEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
