// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flatmessages

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BatteryState struct {
	_tab flatbuffers.Table
}

func GetRootAsBatteryState(buf []byte, offset flatbuffers.UOffsetT) *BatteryState {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BatteryState{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *BatteryState) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BatteryState) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BatteryState) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *BatteryState) ChargeLevel() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BatteryState) MutateChargeLevel(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func (rcv *BatteryState) IsCharging() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BatteryState) MutateIsCharging(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *BatteryState) TotalCapacity() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BatteryState) MutateTotalCapacity(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *BatteryState) CurrentCapacity() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BatteryState) MutateCurrentCapacity(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func (rcv *BatteryState) BatteryVoltage() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BatteryState) MutateBatteryVoltage(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func (rcv *BatteryState) SupplyVoltage() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BatteryState) MutateSupplyVoltage(n float32) bool {
	return rcv._tab.MutateFloat32Slot(16, n)
}

func (rcv *BatteryState) ChargerVoltage() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BatteryState) MutateChargerVoltage(n float32) bool {
	return rcv._tab.MutateFloat32Slot(18, n)
}

func BatteryStateStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func BatteryStateAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func BatteryStateAddChargeLevel(builder *flatbuffers.Builder, chargeLevel float32) {
	builder.PrependFloat32Slot(1, chargeLevel, 0.0)
}
func BatteryStateAddIsCharging(builder *flatbuffers.Builder, isCharging byte) {
	builder.PrependByteSlot(2, isCharging, 0)
}
func BatteryStateAddTotalCapacity(builder *flatbuffers.Builder, totalCapacity float32) {
	builder.PrependFloat32Slot(3, totalCapacity, 0.0)
}
func BatteryStateAddCurrentCapacity(builder *flatbuffers.Builder, currentCapacity float32) {
	builder.PrependFloat32Slot(4, currentCapacity, 0.0)
}
func BatteryStateAddBatteryVoltage(builder *flatbuffers.Builder, batteryVoltage float32) {
	builder.PrependFloat32Slot(5, batteryVoltage, 0.0)
}
func BatteryStateAddSupplyVoltage(builder *flatbuffers.Builder, supplyVoltage float32) {
	builder.PrependFloat32Slot(6, supplyVoltage, 0.0)
}
func BatteryStateAddChargerVoltage(builder *flatbuffers.Builder, chargerVoltage float32) {
	builder.PrependFloat32Slot(7, chargerVoltage, 0.0)
}
func BatteryStateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
